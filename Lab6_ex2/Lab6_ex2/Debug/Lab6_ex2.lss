
Lab6_ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bc  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085e  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048e  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001fa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	7b c0       	rjmp	.+246    	; 0x12c <__vector_13>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f6 00       	.word	0x00f6	; ????
  8e:	fa 00       	.word	0x00fa	; ????
  90:	04 01       	movw	r0, r8
  92:	0a 01       	movw	r0, r20
  94:	14 01       	movw	r2, r8
  96:	1a 01       	movw	r2, r20
  98:	24 01       	movw	r4, r8
  9a:	33 01       	movw	r6, r6
  9c:	37 01       	movw	r6, r14
  9e:	3b 01       	movw	r6, r22
  a0:	3f 01       	movw	r6, r30
  a2:	43 01       	movw	r8, r6
  a4:	47 01       	movw	r8, r14
  a6:	4b 01       	movw	r8, r22

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d0 e4       	ldi	r29, 0x40	; 64
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e0 ee       	ldi	r30, 0xE0	; 224
  bc:	f2 e0       	ldi	r31, 0x02	; 2
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a4 e0       	ldi	r26, 0x04	; 4
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 30       	cpi	r26, 0x0C	; 12
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	df d0       	rcall	.+446    	; 0x29e <main>
  e0:	fd c0       	rjmp	.+506    	; 0x2dc <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  e4:	8b e0       	ldi	r24, 0x0B	; 11
  e6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ea:	86 e4       	ldi	r24, 0x46	; 70
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 100:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 110:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 114:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 118:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 11c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 120:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 124:	8f b7       	in	r24, 0x3f	; 63
 126:	80 68       	ori	r24, 0x80	; 128
 128:	8f bf       	out	0x3f, r24	; 63
 12a:	08 95       	ret

0000012c <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 13e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 142:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 146:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 14a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	a1 09       	sbc	r26, r1
 152:	b1 09       	sbc	r27, r1
 154:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 158:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 15c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 160:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 164:	89 2b       	or	r24, r25
 166:	8a 2b       	or	r24, r26
 168:	8b 2b       	or	r24, r27
 16a:	99 f4       	brne	.+38     	; 0x192 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 176:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 17e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 182:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 186:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 18a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 18e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1a4:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1b4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 1b8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 1bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 1c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 1c4:	08 95       	ret

000001c6 <lightTick>:
}
void lightTick(){
	button0 = ~PINA & 0x01;
 1c6:	80 b1       	in	r24, 0x00	; 0
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	28 2f       	mov	r18, r24
 1cc:	21 70       	andi	r18, 0x01	; 1
 1ce:	80 fd       	sbrc	r24, 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <button0>
	
	switch (state) {
 1d6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <state>
 1da:	8e 2f       	mov	r24, r30
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	87 30       	cpi	r24, 0x07	; 7
 1e0:	91 05       	cpc	r25, r1
 1e2:	c0 f5       	brcc	.+112    	; 0x254 <lightTick+0x8e>
 1e4:	fc 01       	movw	r30, r24
 1e6:	ea 5b       	subi	r30, 0xBA	; 186
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	6f c0       	rjmp	.+222    	; 0x2ca <__tablejump2__>
		case init:
			state = light1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			break;
 1f2:	3d c0       	rjmp	.+122    	; 0x26e <lightTick+0xa8>
			
		case light1:
			if(button0){
 1f4:	21 11       	cpse	r18, r1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <lightTick+0x3a>
				state = wait1;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 1fe:	3b c0       	rjmp	.+118    	; 0x276 <lightTick+0xb0>
			}
			else{
				state = light2;
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 206:	3b c0       	rjmp	.+118    	; 0x27e <lightTick+0xb8>
			}
			break;
			
		case wait1:
			if(button0){
 208:	21 11       	cpse	r18, r1
 20a:	35 c0       	rjmp	.+106    	; 0x276 <lightTick+0xb0>
				state = light1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 212:	2d c0       	rjmp	.+90     	; 0x26e <lightTick+0xa8>
				state = wait1;
			}
			break;
			
		case light2:
			if(button0){
 214:	21 11       	cpse	r18, r1
 216:	04 c0       	rjmp	.+8      	; 0x220 <lightTick+0x5a>
				state = wait2;
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 21e:	33 c0       	rjmp	.+102    	; 0x286 <lightTick+0xc0>
			}
			else{
				state = light3;
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 226:	33 c0       	rjmp	.+102    	; 0x28e <lightTick+0xc8>
			}
			break;
			
		case wait2:
			if(button0){
 228:	21 11       	cpse	r18, r1
 22a:	2d c0       	rjmp	.+90     	; 0x286 <lightTick+0xc0>
				state = light2;
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 232:	25 c0       	rjmp	.+74     	; 0x27e <lightTick+0xb8>
				state = wait2;
			}
			break;
			
		case light3:
			if(button0){
 234:	21 11       	cpse	r18, r1
 236:	04 c0       	rjmp	.+8      	; 0x240 <lightTick+0x7a>
				state = wait3;
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 23e:	2b c0       	rjmp	.+86     	; 0x296 <lightTick+0xd0>
			}
			else{
				state = light1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 246:	13 c0       	rjmp	.+38     	; 0x26e <lightTick+0xa8>
			}
			break;
			
		case wait3:
			if(button0){
 248:	21 11       	cpse	r18, r1
 24a:	25 c0       	rjmp	.+74     	; 0x296 <lightTick+0xd0>
				state = light3;
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
 252:	1d c0       	rjmp	.+58     	; 0x28e <lightTick+0xc8>
				state = wait3;
			}
			break;
	}
	
	switch (state) {
 254:	8e 2f       	mov	r24, r30
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	87 30       	cpi	r24, 0x07	; 7
 25a:	91 05       	cpc	r25, r1
 25c:	f8 f4       	brcc	.+62     	; 0x29c <lightTick+0xd6>
 25e:	fc 01       	movw	r30, r24
 260:	e3 5b       	subi	r30, 0xB3	; 179
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	32 c0       	rjmp	.+100    	; 0x2ca <__tablejump2__>
		case init:
			tempB = 0x01;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
			break;
 26c:	08 95       	ret
			
		case light1:
			tempB = 0x01;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
			break;
 274:	08 95       	ret
			
		case wait1:
			tempB = 0x01;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
			break;
 27c:	08 95       	ret
			
		case light2:
			tempB = 0x02;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
			break;
 284:	08 95       	ret
			
		case wait2:
			tempB = 0x02;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
			break;
 28c:	08 95       	ret
			
		case light3:
			tempB = 0x04;
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
			break;
 294:	08 95       	ret
			
		case wait3:
			tempB = 0x04;
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
 29c:	08 95       	ret

0000029e <main>:
	}
}

int main(void) {
	
	 DDRB = 0xFF; PORTB = 0x00; 
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	84 b9       	out	0x04, r24	; 4
 2a2:	15 b8       	out	0x05, r1	; 5
	 DDRA = 0x00; PORTA = 0xFF; 
 2a4:	11 b8       	out	0x01, r1	; 1
 2a6:	82 b9       	out	0x02, r24	; 2
	 TimerSet(60);
 2a8:	6c e3       	ldi	r22, 0x3C	; 60
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	79 df       	rcall	.-270    	; 0x1a4 <TimerSet>
	 TimerOn();
 2b2:	18 df       	rcall	.-464    	; 0xe4 <TimerOn>
    /* Replace with your application code */
    while (1) 
    {
		 //tempA = ~PINA & 0x08;
		 
		 lightTick();
 2b4:	88 df       	rcall	.-240    	; 0x1c6 <lightTick>
 2b6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		 
		 while (!TimerFlag);	
 2ba:	88 23       	and	r24, r24
 2bc:	e1 f3       	breq	.-8      	; 0x2b6 <main+0x18>
 2be:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		 TimerFlag = 0;
 2c2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tempB>
		 
		 PORTB = tempB;
 2c6:	85 b9       	out	0x05, r24	; 5
 2c8:	f5 cf       	rjmp	.-22     	; 0x2b4 <main+0x16>

000002ca <__tablejump2__>:
		
    }
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	00 24       	eor	r0, r0
 2d0:	00 1c       	adc	r0, r0
 2d2:	0b be       	out	0x3b, r0	; 59
 2d4:	07 90       	elpm	r0, Z+
 2d6:	f6 91       	elpm	r31, Z
 2d8:	e0 2d       	mov	r30, r0
 2da:	09 94       	ijmp

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
